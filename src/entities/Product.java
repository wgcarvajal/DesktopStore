package entities;
// Generated 9/02/2021 12:32:00 PM by Hibernate Tools 4.3.1


import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Product generated by hbm2java
 */
@Entity
@Table(name="product"
    ,catalog="storebd"
)
public class Product  implements java.io.Serializable {

     private Long prodId;
     private Brand brand;
     private Category category;
     private Owner owner;
     private Product product;
     private Producttype producttype;
     private Unity unity;
     private String prodBarCode;
     private String prodName;
     private String prodNameBill;
     private int prodStock;
     private int prodIva;
     private int prodBaseNumber;
     private int prodUnitValue;
     private Integer prodCompositionValue;
     private Set<Product> products = new HashSet<Product>(0);
     private Set<Purchaseitem> purchaseitems = new HashSet<Purchaseitem>(0);
     private Set<Productimage> productimages = new HashSet<Productimage>(0);
     private Set<Price> prices = new HashSet<Price>(0);
     private Set<Pricepurchase> pricepurchases = new HashSet<Pricepurchase>(0);
     private Set<Orderitem> orderitems = new HashSet<Orderitem>(0);
     private Set<Provides> provideses = new HashSet<Provides>(0);

    public Product() {
    }

	
    public Product(Category category, Owner owner, Producttype producttype, Unity unity, String prodName, int prodStock, int prodIva, int prodBaseNumber, int prodUnitValue) {
        this.category = category;
        this.owner = owner;
        this.producttype = producttype;
        this.unity = unity;
        this.prodName = prodName;
        this.prodStock = prodStock;
        this.prodIva = prodIva;
        this.prodBaseNumber = prodBaseNumber;
        this.prodUnitValue = prodUnitValue;
    }
    public Product(Brand brand, Category category, Owner owner, Product product, Producttype producttype, Unity unity, String prodBarCode, String prodName, String prodNameBill, int prodStock, int prodIva, int prodBaseNumber, int prodUnitValue, Integer prodCompositionValue, Set<Product> products, Set<Purchaseitem> purchaseitems, Set<Productimage> productimages, Set<Price> prices, Set<Pricepurchase> pricepurchases, Set<Orderitem> orderitems, Set<Provides> provideses) {
       this.brand = brand;
       this.category = category;
       this.owner = owner;
       this.product = product;
       this.producttype = producttype;
       this.unity = unity;
       this.prodBarCode = prodBarCode;
       this.prodName = prodName;
       this.prodNameBill = prodNameBill;
       this.prodStock = prodStock;
       this.prodIva = prodIva;
       this.prodBaseNumber = prodBaseNumber;
       this.prodUnitValue = prodUnitValue;
       this.prodCompositionValue = prodCompositionValue;
       this.products = products;
       this.purchaseitems = purchaseitems;
       this.productimages = productimages;
       this.prices = prices;
       this.pricepurchases = pricepurchases;
       this.orderitems = orderitems;
       this.provideses = provideses;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="prodId", unique=true, nullable=false)
    public Long getProdId() {
        return this.prodId;
    }
    
    public void setProdId(Long prodId) {
        this.prodId = prodId;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="brandId")
    public Brand getBrand() {
        return this.brand;
    }
    
    public void setBrand(Brand brand) {
        this.brand = brand;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="catId", nullable=false)
    public Category getCategory() {
        return this.category;
    }
    
    public void setCategory(Category category) {
        this.category = category;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ownId", nullable=false)
    public Owner getOwner() {
        return this.owner;
    }
    
    public void setOwner(Owner owner) {
        this.owner = owner;
    }

@ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="prodComposition")
    public Product getProduct() {
        return this.product;
    }
    
    public void setProduct(Product product) {
        this.product = product;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="prodtypeId", nullable=false)
    public Producttype getProducttype() {
        return this.producttype;
    }
    
    public void setProducttype(Producttype producttype) {
        this.producttype = producttype;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="uniId", nullable=false)
    public Unity getUnity() {
        return this.unity;
    }
    
    public void setUnity(Unity unity) {
        this.unity = unity;
    }

    
    @Column(name="prodBarCode", length=50)
    public String getProdBarCode() {
        return this.prodBarCode;
    }
    
    public void setProdBarCode(String prodBarCode) {
        this.prodBarCode = prodBarCode;
    }

    
    @Column(name="prodName", nullable=false, length=100)
    public String getProdName() {
        return this.prodName;
    }
    
    public void setProdName(String prodName) {
        this.prodName = prodName;
    }

    
    @Column(name="prodNameBill", length=18)
    public String getProdNameBill() {
        return this.prodNameBill;
    }
    
    public void setProdNameBill(String prodNameBill) {
        this.prodNameBill = prodNameBill;
    }

    
    @Column(name="prodStock", nullable=false)
    public int getProdStock() {
        return this.prodStock;
    }
    
    public void setProdStock(int prodStock) {
        this.prodStock = prodStock;
    }

    
    @Column(name="prodIva", nullable=false)
    public int getProdIva() {
        return this.prodIva;
    }
    
    public void setProdIva(int prodIva) {
        this.prodIva = prodIva;
    }

    
    @Column(name="prodBaseNumber", nullable=false)
    public int getProdBaseNumber() {
        return this.prodBaseNumber;
    }
    
    public void setProdBaseNumber(int prodBaseNumber) {
        this.prodBaseNumber = prodBaseNumber;
    }

    
    @Column(name="prodUnitValue", nullable=false)
    public int getProdUnitValue() {
        return this.prodUnitValue;
    }
    
    public void setProdUnitValue(int prodUnitValue) {
        this.prodUnitValue = prodUnitValue;
    }

    
    @Column(name="prodCompositionValue")
    public Integer getProdCompositionValue() {
        return this.prodCompositionValue;
    }
    
    public void setProdCompositionValue(Integer prodCompositionValue) {
        this.prodCompositionValue = prodCompositionValue;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="product")
    public Set<Product> getProducts() {
        return this.products;
    }
    
    public void setProducts(Set<Product> products) {
        this.products = products;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="product")
    public Set<Purchaseitem> getPurchaseitems() {
        return this.purchaseitems;
    }
    
    public void setPurchaseitems(Set<Purchaseitem> purchaseitems) {
        this.purchaseitems = purchaseitems;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="product")
    public Set<Productimage> getProductimages() {
        return this.productimages;
    }
    
    public void setProductimages(Set<Productimage> productimages) {
        this.productimages = productimages;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="product")
    public Set<Price> getPrices() {
        return this.prices;
    }
    
    public void setPrices(Set<Price> prices) {
        this.prices = prices;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="product")
    public Set<Pricepurchase> getPricepurchases() {
        return this.pricepurchases;
    }
    
    public void setPricepurchases(Set<Pricepurchase> pricepurchases) {
        this.pricepurchases = pricepurchases;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="product")
    public Set<Orderitem> getOrderitems() {
        return this.orderitems;
    }
    
    public void setOrderitems(Set<Orderitem> orderitems) {
        this.orderitems = orderitems;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="product")
    public Set<Provides> getProvideses() {
        return this.provideses;
    }
    
    public void setProvideses(Set<Provides> provideses) {
        this.provideses = provideses;
    }




}


